# Test values for helm-generic.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# default image
image:
  repository: example
  tag: 123-alpine

# Annotations to apply to all resources
commonAnnotations:
  common-anno: common-foo
# Labels to apply to all resources
commonLabels:
  common-foo: common-bar

# Annotations and labels to apply to the pod spec
podAnnotations:
  pod-foo: pod-bar

podLabels:
  pod-foo: pod-bar

# default overlay to apply to all rendered pod specs
defaultPodSpec:
  enableServiceLinks: false

# default overlay to apply to all rendered container specs
defaultContainerSpec:
  securityContext:
    runAsNonRoot: true

## List of specs to deploy
#  Can be a array or map
resources:
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: "{{ .Release.Namespace }}"
  - apiVersion: v1
    kind: Service
    spec:
      type: ClusterIP
  - apiVersion: v1
    kind: ConfigMap
    data:
      foo: "{{ .Release.Name }}"
  - apiVersion: v1
    kind: Pod
    spec:
      initContainers:
        tpl:
          image: "{{ .Release.Name }}:foobar"
        bar:
          image: "foo:12"
      containers:
        - name: foo
        - name: bar
          image: "foo:12"
      securityContext:
        fsGroup: 2000
  - apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: '{{ include "helm-generic.fullname" . }}-foo'
    spec:
      template:
        spec:
          containers:
            - name: foo
            - name: bar
              image: "foo:12"
  - apiVersion: apps/v1
    kind: Deployment
    spec:
      template:
        spec:
          initContainers:
            - name: foo
            - name: bar
              image: "foo:12"
          containers:
            - name: foo
            - name: bar
              image: "foo:12"
  - apiVersion: apps/v1
    kind: StatefulSet
    spec:
      template:
        spec:
          containers:
            foo:
              resources: {}
            tpl:
              image: "{{ .Release.Name }}:foobar"
            bar:
              image: "foo:12"
  - apiVersion: batch/v1
    kind: Job
    spec:
      parallelism: 1
      template:
        spec:
          containers:
            foo:
              resources: {}
            tpl:
              image: "{{ .Release.Name }}:foobar"
            bar:
              image: "foo:12"
  - apiVersion: batch/v1
    kind: CronJob
    spec:
      schedule: 0 8 * * *
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                foo:
                  resources: {}
                tpl:
                  image: "{{ .Release.Name }}:foobar"
                bar:
                  image: "foo:12"

  # case: unset selector labels
  - apiVersion: v1
    kind: Service
    spec:
      type: ClusterIP
      selector:
        app: foo
        app.kubernetes.io/name: ~

  # case: metadata self-reference
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: '{{ include "helm-generic.fullname" . }}-meta-ref'
      namespace: ~
    data:
      meta-ref: "{{ .resource.metadata.name }}"

  # case: loop and condition
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: '{{ include "helm-generic.fullname" . }}-{{ ._loopValues.k }}'
    data:
      foo: "{{ ._loopValues.k }}"
      key2: |-
        {{- .Files.Get "test/test-file.txt" | nindent 4 }}
    _condition: "{{ eq ._loopKey 1 }}"
    _loop:
      - k: loopvar1
      - k: loopvar2

## List of resources to skip the resource generation engine, but will will be
#  templated with tpl and root values
#  Can be a array or map
rawResources:
  srv:
    apiVersion: v1
    kind: Service
    metadata:
      name: my-service
    spec:
      type: ClusterIP
